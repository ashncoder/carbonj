apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: graphite-web
    stack: dev
  name: graphite-web
  namespace: carbonj
spec:
  replicas: 1
  selector:
    matchLabels:
      app: graphite-web
  template:
    metadata:
      labels:
        app: graphite-web
    spec:
      containers:
      - name: graphite-web
        # TODO expose our graphite-web image instead since it's got a few optimizations
        image: smurfynet/graphite-web
        imagePullPolicy: Always
        env:
          - name: CLUSTER_SERVERS
            # going against both nodes in the shard
            value: carbonj-p1:2001,carbonj-p2:2001
            # pinning queries to go against -0 nodes of all shards
#            value: carbonj-p1-0.carbonj-p1.carbonj.svc.cluster.local:2001,carbonj-p2-0.carbonj-p2.carbonj.svc.cluster.local:2001
          - name: MEMCACHE_HOSTS
            value: "memcached:11211"
          - name: MAX_REQUESTS
            value: "1000000"
          - name: MAX_REQUESTS_JITTER
            value: "10"
          - name: TIMEOUT
            value: "300"
          - name: REMOTE_FIND_TIMEOUT
            value: "60"
          - name: REMOTE_FETCH_TIMEOUT
            value: "300"
          - name: HEALTHCHECK_PORT
            value: "8080"
          - name: HEALTH_TIMEOUT
            value: "900"
          - name: HEALTHCHECK_URL
            value: "http://localhost"
          - name: LOG_RENDERING_PERFORMANCE
            value: "True"
          - name: LOG_CACHE_PERFORMANCE
            value: "True"
            # we can't cache more than <resolution> here since
          - name: DEFAULT_CACHE_DURATION
            value: "60"
          - name: HEALTH_SENSOR_BASED_EXPIRATION_ENABLED
            value: "1"
        ports:
        - name: graphite-web
          containerPort: 80
          protocol: TCP
        resources:
          requests:
            memory: 100M
            cpu: 0.25
          limits:
            memory: 5000M
            cpu: 1
#        livenessProbe:
#          httpGet:
#            path: /
#            port: 8080
#          initialDelaySeconds: 10
#          periodSeconds: 5
#          timeoutSeconds: 5
#          failureThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: graphite-web
  labels:
    app: graphite-web
    stack: dev
  namespace: carbonj
spec:
  type: NodePort
  selector:
    app: graphite-web
  ports:
  - port: 80
    targetPort: 80
    name: graphite-web
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: graphite-web-ingress
  namespace: carbonj
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefixStrip
spec:
  rules:
  - http:
      paths:
      - path: /carbonj-graphite-web
        backend:
          serviceName: graphite-web
          servicePort: 80
